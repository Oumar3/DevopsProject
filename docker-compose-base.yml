# Extension pour les ressources des services légers (frontend, nginx)
x-resources-leger: &resources-leger
  deploy:
    resources:
      limits:
        cpus: '0.50'
        memory: 512M
      reservations:
        cpus: '0.25'
        memory: 256M

# Extension pour les ressources des services moyens (backend)
x-resources-medium: &resources-medium
  deploy:
    resources:
      limits:
        cpus: '1.5'
        memory: 1G
      reservations:
        cpus: '0.5'
        memory: 512M

# Extension pour les ressources des services lourds (base de données)
x-resources-lourde: &resources-lourde
  deploy:
    resources:
      limits:
        cpus: '2.0'
        memory: 2G
      reservations:
        cpus: '1.0'
        memory: 1G

# Extension pour la configuration des logs
x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
      labels: "service,environment"

# Extension pour la configuration commune des services
x-common-config: &common-config
  restart: unless-stopped
  networks:
    - app-network

services:
  frontend:
    # Extensions communes
    <<: [*common-config, *resources-leger, *default-logging]
    
    # Configuration de construction pour développement
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    # Nom du conteneur
    container_name: frontend-dev
    # Dépendances - attend que le backend soit ready
    depends_on:
      backend:
        condition: service_healthy
    # Variables d'environnement via .env
    env_file:
      - ./frontend/.env
    # Ports exposés pour accès et communication avec backend
    ports:
      - "3000:3000"
    # Volumes pour hot-reload en développement
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    # Labels pour identification
    labels:
      - "service=frontend"
      - "environment=development"
    # Healthcheck pour vérifier le serveur dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Commande serveur dev avec proxy vers backend
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  backend:
    #Extensions communes
    <<: [*common-config, *resources-medium, *default-logging]
    
    #Configuration de construction
    build:
      context: ./backend
      dockerfile: Dockerfile
    #Nom du conteneur
    container_name: backend-prod
    #Dépendances de service
    depends_on:
      mongo:
        condition: service_healthy
    #Variables d'environnement via .env
    env_file:
      - ./backend/.env
    #Mappage des ports
    ports:
      - "5000:5000"
    #Volumes de production
    volumes:
      - backend-logs:/app/logs
    #Labels pour le monitoring

    labels:
      - "service=backend"
      - "environment=production"
      - "monitoring=enabled"
    
    #Vérification de santé
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/articles"]
      interval: 10s
      timeout: 5s
      retries: 5

    #Commande de lancement
    command: ["pm2-runtime", "start", "ecosystem.config.json", "--env", "production", "--no-daemon"]

  mongo:
    #Extensions communes
    <<: [*common-config, *resources-lourde, *default-logging]
    
    #Image Docker officielle
    image: mongo:latest
    #Nom du conteneur
    container_name: mongo
    #Variables d'environnement via .env
    env_file:
      - ./backend/.env
    #Volumes pour la persistance
    volumes:
      - mongo-data:/data/db
      - mongo-logs:/var/log/mongodb
    #Labels pour le monitoring
    labels:
      - "service=mongodb"
      - "environment=production"
      - "backup=enabled"
    #vérification de santé
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    # Extensions communes
    <<: [*common-config, *resources-leger, *default-logging]
    
    #Image officielle
    image: nginx:alpine
    #Nom du conteneur
    container_name: nginx
    #Politique de redémarrage (hérité de common-config)
    #Dépendances - attend les autres services
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    #Ports exposés - point d'entrée unique
    ports:
      - "80:80"
      - "443:443"
    #Volumes pour configuration et fichiers statiques
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend-dist:/usr/share/nginx/html:ro
      - nginx-logs:/var/log/nginx
    #Labels pour le monitoring
    labels:
      - "service=nginx"
      - "environment=production"
      - "role=central-proxy"
      - "serves=frontend+backend"
    #Vérification de santé
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  #Volume pour les fichiers statiques du frontend buildés
  frontend-dist:
    driver: local

  #Volume pour les données MongoDB
  mongo-data:
    driver: local

  #Volume pour la configuration MongoDB
  mongo-config:
    driver: local

  #Volume pour les logs MongoDB
  mongo-logs:
    driver: local
  
  # Volume pour les logs du backend
  backend-logs:
    driver: local

  # Volume pour les logs Nginx
  nginx-logs:
    driver: local



networks:
  # Réseau principal de l'application
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16